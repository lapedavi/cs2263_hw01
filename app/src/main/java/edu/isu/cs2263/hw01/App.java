/*
 * This Java source file was generated by the Gradle 'init' task.
 */
//Imports
package edu.isu.cs2263.hw01;
import org.apache.commons.cli.*;
import java.util.Scanner;
import java.io.*;

//Class
public class App {

    //Main Method
    public static void main(String[] args) {
        //Scanner Object
        Scanner sc = new Scanner(System.in);

        //Create Options
        Options options = new Options();
        options.addOption("h","help",false,"print usage message");
        options.addOption("b","batch",true,"batch files containing expressions to evaluate");
        options.addOption("o","output",true,"output file");

        //Create Parser
        CommandLineParser parser = new DefaultParser();

        try {
            //Parse the options and arguments
            CommandLine cmd = parser.parse(options, args);

            //if eval was passed in as argument 0
            if("eval".equals(args[0])) {

                //if more than eval was passed in and a command argument was provided in argument 1
                if(args.length > 1 && ("-h".equals(args[1]) || "-b".equals((args[1])) || "-o".equals(args[1]) || "--help".equals(args[1]) || "--batch".equals(args[1]) || "--output".equals(args[1])) ) {
                    //if help was passed in as argument 1
                    if (cmd.hasOption("h")) {

                        //Run help
                        help();

                    }
                    //if a different command were passed in
                    else {

                        //check if it was the batch command
                        if (cmd.hasOption("b")) {

                            //run batch with the passed in arguments
                            batch(args);
                        }
                        //if the output command was passed in
                        else if (cmd.hasOption("o")) {

                            //run output with passed in arguments
                            output(args);
                        }
                    }
                }
                //if no command were passed, or just eval
                else {
                    //Give instructions
                    System.out.println("\nEnter \"exit\" to exit the program");
                    System.out.println("Separate numbers and operators by spaces");

                    //run till user opts out
                    while(true) {
                        try {

                            //enter expression to evaluate
                            System.out.print("> ");
                            String evaluateExpression = sc.nextLine();

                            //if user passed exit then quit program
                            if ("exit".equals(evaluateExpression)) {
                                break;
                            }

                            //split the expression
                            String[] stringArray = evaluateExpression.split(" ");

                            //check if expression is valid being greater than 2
                            if (stringArray.length > 2) {

                                //call evaluate and passed in the expression parts
                                evaluate(stringArray);

                            }
                            //expression did not have enough arguments
                            else {
                                throw new Exception("Equations require a minimum of 3 arguments of Number, Operator, then Number");
                            }
                        }
                        //catch exceptions
                        catch (Exception e){

                            //print exception message
                            System.out.println("Exception Occurred: " + e.getMessage());

                        }

                    }
                }

            }
        }
        //catch exception
        catch (Exception e){

            //print out exception message
            System.out.println("Exception Occurred: " + e.getMessage());

        }

    }

    //evaluate method
    public static String evaluate(String[] expression){
        try {
            //run through expression
            for (int x = 0; x < expression.length - 1; x = x + 2) {

                //set operation equal to the x + 1 expression
                String operation = expression[x + 1];

                //set numbers equal to the x and x + 2
                double firstNum = Double.parseDouble(expression[x]);
                double secondNum = Double.parseDouble(expression[x + 2]);

                //check which operation was passed and evaluate accordingly
                //set x + 2 to answer making it x on the next loop
                if (operation.equals("*")) {
                    expression[x + 2] = String.valueOf(firstNum * secondNum);
                } else if (operation.equals("/")) {
                    expression[x + 2] = String.valueOf(firstNum / secondNum);
                } else if (operation.equals("+")) {
                    expression[x + 2] = String.valueOf(firstNum + secondNum);
                } else if (operation.equals("-")) {
                    expression[x + 2] = String.valueOf(firstNum - secondNum);
                }
                //Operation does not exist
                else {
                    //tell user to use a correct operation
                    throw new Exception("Please provide an operator of * , / , + , -");
                }
            }
            //print out answer
            System.out.println("  -> " + expression[expression.length - 1]);
        }
        //catch exception
        catch (Exception e){

            //print exception message
            System.out.println("Exception Occurred: " + e.getMessage());

        }
        //return the expression answer
        return expression[expression.length-1];
    }

    //batch method
    public static void batch(String[] args){

        //get file name
        String lib = args[2];

        //create file object
        File batchFile = new File(lib);
        try {
            //if the file exists, process it
            if (batchFile.exists()) {
                Scanner bsc = new Scanner(batchFile);

                //foreach line, evaluate the expression if it has more than
                //two arguments
                while(bsc.hasNextLine()){
                    String line = bsc.nextLine();
                    String[] stringArray = line.split(" ");
                    if (stringArray.length > 2) {
                        System.out.println("> " + line);
                        evaluate(stringArray);
                    }
                    //if it only has 2 arguments
                    else {

                        //throw exception
                        throw new Exception("Equations require a minimum of 3 arguments of Number, Operator, then Number");

                    }
                }
                //close connection to file
                bsc.close();
            }
            //if file does not exist
            else {
                //throw exception
                throw new Exception("File was not found, please provide a real file");
            }
        }
        //catch exception
        catch (Exception e){

            //print out exception message
            System.out.println("Exception Occurred: " + e.getMessage());

        }
    }

    //output method
    public static void output(String[] args){

        //set file
        String lib = args[2];

        //create file and scanner object
        File outputFile = new File(lib);
        Scanner sc = new Scanner(System.in);
        try {
            //create file if it does not exist
            outputFile.createNewFile();

            //write to the file
            FileWriter outputWriter = new FileWriter(lib);

            //give user instructions
            System.out.println("\nEnter \"exit\" to exit the program");
            System.out.println("Separate numbers and operators by spaces");

            //evaluate till the user opts out
            while (true) {

                //read expression from user
                System.out.print("> ");
                String evaluateExpression = sc.nextLine();

                //if user provides exit, then quit program
                if ("exit".equals(evaluateExpression)) {
                    break;
                }

                //add expression from user to file
                outputWriter.append(evaluateExpression + "\n");

                //split user provided expression
                String[] stringArray = evaluateExpression.split(" ");

                //if the expression is valid with more than 2 arguments
                if (stringArray.length > 2) {

                    //append output of expression to file
                    outputWriter.append(" -> "+evaluate(stringArray)+"\n");
                }
            }
            //close write connection
            outputWriter.close();
        }
        //catch exception
        catch (Exception e){
            //print exception message
            System.out.println("Exception Occurred: " + e.getMessage());
        }
    }

    //help method
    public static void help(){
        //print out the usage for eval command and options
        System.out.println("usage: eval [OPTIONS]\n" +
                "Evaluation of simple mathematical expressions\n" +
                "\n" +
                "-b <file>, --batch <file>\tbatch file containing expressions to evaluate\n" +
                "-h, --help\tprint usage message\n" +
                "-o <file>, --output <file>\toutput file\n" +
                "\n" +
                "Copyright (C) 2021 David L. Lape");
    }
}
